rm(list = ls())
#Read data into relevant variables
data = read.csv(file = file.choose())
distance = data['x11']
gender = data['x7']
recommend = data['x8']
#####################################################
female_low_recommend = recommend[gender[[1]] == 0 & distance[[1]] == 1, 1]
female_mid_recommend = recommend[gender[[1]] == 0 & distance[[1]] == 2, 1]
female_high_recommend = recommend[gender[[1]] == 0 & distance[[1]] == 3, 1]
male_low_recommend = recommend[gender[[1]] == 1 & distance[[1]] == 1, 1]
male_mid_recommend = recommend[gender[[1]] == 1 & distance[[1]] == 2, 1]
male_high_recommend = recommend[gender[[1]] == 1 & distance[[1]] == 3, 1]
#Testing for normality
par(mfrow=c(2, 3), row.names(c("males", "females")), colnames(c('low, mid, high')))
qqnorm(male_low_recommend, main = "Recommendations", col = 'blue')
qqnorm(male_high_recommend, main = "Recommendations", col = 'blue')
qqnorm(male_high_recommend, main = "Recommendations", col = 'blue')
qqnorm(female_low_recommend, main = "Recommendations", col = 'blue')
qqnorm(female_mid_recommend, main = "Recommendations", col = 'blue')
qqnorm(female_high_recommend, main = "Recommendations", col = 'blue')
hist(male_low_recommend, main = "Recommendations", breaks = seq(1, 7, 1), col = 'blue')
hist(male_high_recommend, main = "Recommendations", breaks = seq(1, 7, 1), col = 'blue')
hist(male_high_recommend, main = "Recommendations", breaks = seq(1, 7, 1), col = 'blue')
hist(female_low_recommend, main = "Recommendations", breaks = seq(1, 7, 1), col = 'blue')
hist(female_mid_recommend, main = "Recommendations", breaks = seq(1, 7, 1), col = 'blue')
hist(female_high_recommend, main = "Recommendations", breaks = seq(1, 7, 1), col = 'blue')
hist(recommend[[1]], main = "Recommendations", col = "blue", breaks = seq(1, 7, 1))
#hist(recommend[[1]], main = "Recommendations", col = "blue", breaks = seq(1, 7, 1))
#barplot(table(recommend[[1]]), ylab = "Frequencies", main = "Recommendations", xlab = "Scores", col = "blue")
library('e1071')
skewness(recommend[[1]])
shapiro.test(male_high_recommend)
recommend[[1]]
shapiro.test(recommend[[1]])
shapiro.test(male_high_recommend)
shapiro.test(male_mid_recommend)
#data:  male_mid_recommend
#W = 0.42208, p-value = 4.195e-08
shapiro.test(male_low_recommend)
library(car)
install.packages('car')
#data:  male_low_recommend
#W = 0.41679, p-value = 1.109e-12
shapiro.test(female_high_recommend)
#data:  female_high_recommend
#W = 0.63036, p-value = 6.75e-07
shapiro.test(female_mid_recommend)
shapiro.test(female_low_recommend)
?leveneTest
??leveneTest
library(car)
leveneTest(recommend[[1]], group = as.factor(gender[[1]]))
leveneTest(recommend[[1]], group = as.factor(distance[[1]]))
setwd("~/Courses/Psych 891/Psych891/Final")
rm(list = ls())
data = read.csv(file = file.choose())
head(data)
data[,2]
plot(dist[,2])
scatter(dist[,2])
hist(dist[,2])
dist[,2]
plot(data$Dist)
rm(list = ls())
#Read data into relevant variables
data = read.csv(file = file.choose())
distance = data['x11']
gender = data['x7']
recommend = data['x8']
#####################################################
female_low_recommend = recommend[gender[[1]] == 0 & distance[[1]] == 1, 1]
female_mid_recommend = recommend[gender[[1]] == 0 & distance[[1]] == 2, 1]
female_high_recommend = recommend[gender[[1]] == 0 & distance[[1]] == 3, 1]
male_low_recommend = recommend[gender[[1]] == 1 & distance[[1]] == 1, 1]
male_mid_recommend = recommend[gender[[1]] == 1 & distance[[1]] == 2, 1]
male_high_recommend = recommend[gender[[1]] == 1 & distance[[1]] == 3, 1]
#Testing for normality
par(mfrow=c(2, 3), row.names(c("males", "females")), colnames(c('low, mid, high')))
qqnorm(male_low_recommend, main = "Recommendations", col = 'blue')
qqnorm(male_mid_recommend, main = "Recommendations", col = 'blue')
qqnorm(male_high_recommend, main = "Recommendations", col = 'blue')
qqnorm(female_low_recommend, main = "Recommendations", col = 'blue')
qqnorm(female_mid_recommend, main = "Recommendations", col = 'blue')
qqnorm(female_high_recommend, main = "Recommendations", col = 'blue')
hist(male_low_recommend, main = "Recommendations", breaks = seq(1, 7, 1), col = 'blue')
hist(male_high_recommend, main = "Recommendations", breaks = seq(1, 7, 1), col = 'blue')
hist(male_mid_recommend, main = "Recommendations", breaks = seq(1, 7, 1), col = 'blue')
hist(female_low_recommend, main = "Recommendations", breaks = seq(1, 7, 1), col = 'blue')
hist(female_mid_recommend, main = "Recommendations", breaks = seq(1, 7, 1), col = 'blue')
hist(female_high_recommend, main = "Recommendations", breaks = seq(1, 7, 1), col = 'blue')
hist(male_low_recommend, main = "Recommendations", breaks = seq(1, 7, 1), col = 'blue')
hist(male_mid_recommend, main = "Recommendations", breaks = seq(1, 7, 1), col = 'blue')
hist(male_high_recommend, main = "Recommendations", breaks = seq(1, 7, 1), col = 'blue')
hist(female_low_recommend, main = "Recommendations", breaks = seq(1, 7, 1), col = 'blue')
hist(female_mid_recommend, main = "Recommendations", breaks = seq(1, 7, 1), col = 'blue')
hist(female_high_recommend, main = "Recommendations", breaks = seq(1, 7, 1), col = 'blue')
setwd("~/Courses/Psych 891/Psych891/Final")
rm(list = ls())
data = read.csv(file = file.choose())
data = read.csv(file = file.choose())
head(data)
#quantile(total_rts[,1], c(0.1, 0.3, 0.5, 0.7, 0.9))
source("wald.R")
source("TruncNorm.R")
#RTs during each trial. Where a trial is a sequence of length 12. So there'd be 12 RTs.
#Assume 100 trials
n_trials = 100
v = rtnorm(n_trials, mu = 0.3, sig = 0.1, lo = 0.1, hi = 0.5)
plot(data$Dist)
p = c(1/3, 1/3, 1/3)
n_trials = 100
alpha = 0.05
for (i in (1:n_trials)){
p = c(1/3 + alpha, 1/3 - alpha/2, 1/3 - alpha/2)
}
p
n_trials = 100
alpha = 0.5
for (i in (1:n_trials)){
p = c(1/3 + alpha, 1/3 - alpha/2, 1/3 - alpha/2)
}
p
data$Dist
data$Dist/sum(data$Dist)
sum(data$Dist/sum(data$Dist))
a = rev(data$Dist)
a
trans_a = a/sum(a)
trans_a
trans_a * (1/3) / trans_a[1]
trans_a * (1/3) / trans_a[n_trials]
a_to_transition <- function(data){
a = rev(data$Dist)
trans_a = a/sum(a)
trans_a = trans_a * (1/3) / trans_a[n_trials]
trans_a[trans_a>1]=1
return (trans_a)
}
a_to_transition <- function(data){
a = rev(data$Dist)
a_trans = a/sum(a)
a_trans = a_trans * (1/3) / a_trans[n_trials]
a_trans[a_trans>1]=1
return (a_trans)
}
a_to_transition(data)
pred_trans = function(alpha){
for (i in (1:n_trials)){
p = c(1/3 + alpha, 1/3 - alpha/2, 1/3 - alpha/2)
}
return(p)
}
predicted_transition_prob = pred_trans(0.1)
predicted_transition_prob
pred_trans = function(alpha){
for (i in (1:n_trials)){
p = c(1/3 + alpha, 1/3 - alpha/2, 1/3 - alpha/2)
}
return(p[1])
}
pred_trans = function(alpha){
for (i in (1:n_trials)){
p = c(p, 1/3 + alpha)
}
return(p)
}
predicted_transition_prob = pred_trans(0.1)
predicted_transition_prob
pred_trans = function(alpha){
p = c(1/3)
for (i in (1:n_trials)){
p = c(p, p[i] + alpha)
}
return(p)
}
predicted_transition_prob = pred_trans(0.1)
predicted_transition_prob
predicted_transition_prob = pred_trans(0.01)
predicted_transition_prob
predicted_transition_prob = pred_trans(0.015)
predicted_transition_prob
predicted_transition_prob = pred_trans(0.08)
predicted_transition_prob
predicted_transition_prob = pred_trans(0.008)
predicted_transition_prob
pred_trans = function(alpha){
p = c(1/3)
for (i in (1:n_trials)){
p = c(p, p[i] + (n_trials - i) * alpha)
}
return(p)
}
predicted_transition_prob = pred_trans(0.008)
predicted_transition_prob
predicted_transition_prob = pred_trans(0.000001)
predicted_transition_prob
predicted_transition_prob = pred_trans(0.00001)
predicted_transition_prob
predicted_transition_prob = pred_trans(0.0001)
predicted_transition_prob
predicted_transition_prob = pred_trans(0.001)
predicted_transition_prob
predicted_transition_prob = pred_trans(0.0015)
predicted_transition_prob
predicted_transition_prob = pred_trans(0.0013)
predicted_transition_prob
predicted_transition_prob = pred_trans(0.001)
predicted_transition_prob
predicted_transition_prob = pred_trans(0.0009)
predicted_transition_prob
predicted_transition_prob = pred_trans(0.0006)
predicted_transition_prob
predicted_transition_prob = pred_trans(0.0003)
predicted_transition_prob
predicted_transition_prob = pred_trans(0.0002)
predicted_transition_prob
predicted_transition_prob = pred_trans(0.0001)
predicted_transition_prob
predicted_transition_prob = pred_trans(0.00015)
predicted_transition_prob
observed_transition_prob = a_to_transition(data)
pred_trans = function(alpha){
p = c(1/3)
for (i in (1:n_trials)){
p = c(p, p[i] + (n_trials/100 - i) * alpha)
}
return(p)
}
predicted_transition_prob = pred_trans(0.5)
predicted_transition_prob
pred_trans = function(alpha){
p = c(1/3)
for (i in (1:n_trials)){
p = c(p, p[i] + ((n_trials/100) - i) * alpha)
}
return(p)
}
predicted_transition_prob = pred_trans(0.5)
predicted_transition_prob
pred_trans = function(alpha){
p = c(1/3)
for (i in (1:n_trials)){
p = c(p, p[i] + ((n_trials/100) - i/100) * alpha)
}
return(p)
}
predicted_transition_prob = pred_trans(0.5)
predicted_transition_prob
predicted_transition_prob = pred_trans(0.05)
predicted_transition_prob
predicted_transition_prob = pred_trans(0.03)
predicted_transition_prob
predicted_transition_prob = pred_trans(0.02)
predicted_transition_prob
predicted_transition_prob = pred_trans(0.01)
predicted_transition_prob
x <- c(1,2,3,4,4,4,4,5,6,7)
mult_count <- c(x, x+11, x+16, x+16, x+21, x+32)
mult_count
breakfast <- as.factor(c(rep(0, 30), rep(1, 30)))
breakfast
gender = as.factor(gender)
rm(list = ls())
#Read data into relevant variables
data = read.csv(file = file.choose())
distance = data['x11']
gender = data['x7']
recommend = data['x8']
#####################################################
female_low_recommend = recommend[gender[[1]] == 0 & distance[[1]] == 1, 1]
female_mid_recommend = recommend[gender[[1]] == 0 & distance[[1]] == 2, 1]
female_high_recommend = recommend[gender[[1]] == 0 & distance[[1]] == 3, 1]
male_low_recommend = recommend[gender[[1]] == 1 & distance[[1]] == 1, 1]
male_mid_recommend = recommend[gender[[1]] == 1 & distance[[1]] == 2, 1]
male_high_recommend = recommend[gender[[1]] == 1 & distance[[1]] == 3, 1]
#Testing for normality
par(mfrow=c(2, 3), row.names(c("males", "females")), colnames(c('low, mid, high')))
qqnorm(male_low_recommend, main = "Recommendations", col = 'blue')
qqnorm(male_mid_recommend, main = "Recommendations", col = 'blue')
qqnorm(male_high_recommend, main = "Recommendations", col = 'blue')
qqnorm(female_mid_recommend, main = "Recommendations", col = 'blue')
qqnorm(female_high_recommend, main = "Recommendations", col = 'blue')
qqnorm(female_low_recommend, main = "Recommendations", col = 'blue')
hist(male_mid_recommend, main = "Recommendations", breaks = seq(1, 7, 1), col = 'blue')
hist(male_low_recommend, main = "Recommendations", breaks = seq(1, 7, 1), col = 'blue')
hist(female_low_recommend, main = "Recommendations", breaks = seq(1, 7, 1), col = 'blue')
hist(male_high_recommend, main = "Recommendations", breaks = seq(1, 7, 1), col = 'blue')
hist(female_mid_recommend, main = "Recommendations", breaks = seq(1, 7, 1), col = 'blue')
hist(female_high_recommend, main = "Recommendations", breaks = seq(1, 7, 1), col = 'blue')
#hist(recommend[[1]], main = "Recommendations", col = "blue", breaks = seq(1, 7, 1))
#barplot(table(recommend[[1]]), ylab = "Frequencies", main = "Recommendations", xlab = "Scores", col = "blue")
library('e1071')
skewness(recommend[[1]])
shapiro.test(male_mid_recommend)
#data:  male_mid_recommend
#W = 0.42208, p-value = 4.195e-08
shapiro.test(male_low_recommend)
#data:  male_low_recommend
#W = 0.41679, p-value = 1.109e-12
shapiro.test(female_high_recommend)
#data:  female_high_recommend
#W = 0.63036, p-value = 6.75e-07
shapiro.test(female_mid_recommend)
shapiro.test(female_low_recommend)
library(car)
leveneTest(recommend[[1]], group = as.factor(gender[[1]]))
leveneTest(recommend[[1]], group = as.factor(distance[[1]]))
gender = as.factor(gender)
gender
gender = as.factor(gender[[1]])
gender
gender = as.factor(gender[1])
gender
gender <- as.factor(gender[1])
gender
gender = data['x7']
gender
gender[1]
gender[[1]]
gender_fac <- as.factor(gender[[1]])
gender_fac
dist_fac <- as.factor(distance[[1]])
sub <- as.factor(200)
sub <- as.factor(1:200)
d <- data.frame(recommend = recommend[[1]], gender_fac = gender_fac, sub = sub, dist_fac = dist_fac)
d
head(d)
aov.mult <- aov(recommend ~ gender_fac*dist_fac, data = d)
summary(aov.mult)
coef(aov.mult)
install.packages('multcomp')
library(multcomp)
glht.tukey <- glht(aov.mult, linfct = mcp(Method = "Tukey"))
?glht
?mcp
library(multcomp)
glht.tukey <- glht(aov.mult, linfct = mcp(Method = "Tukey"))
glht.tukey <- glht(aov.mult, linfct = mcp("Tukey"))
glht.tukey <- glht(aov.mult, linfct = mcp(Method =  "Tukey"))
# Rows are contrasts
# Columns are the coefficients for each level of the factor
K <- rbind("Control - Loci" = c(1, 0, -1, 0),
"Rhyme - Loci & Image" = c(0, -1/2, -1/2, 1))
K
?mcp
glht.tukey <- glht(aov.mult, linfct = mcp(gender_fac*dist_fac =  "Tukey"))
Method <- as.factor(gender_fac*dist_fac)
TukeyHSD(aov.mult)
TukeyHSD(aov.mult, "gender_fac")
tukey_gender = TukeyHSD(aov.mult, "gender_fac")
tukey_dist = TukeyHSD(aov.mult, "dist_fac")
summary(tukey_dist)
confint(tukey_gender)
summary(tukey_gender)
tukey_dist$dist_fac
tukey_gender$gender_fac
