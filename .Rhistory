f_gam[si] = exg[2]
ls=exgauss_fit(q_exg[[si]], f_exg[[si]])
#return fit parameters and gsq values. Modify the function in exgaussgsqfit.r
fpar=ls[[1]]
gval=ls[[2]]
fmu[si]=fpar[1]
fsig[si]=fpar[2]
ftau[si]=fpar[3]
f_exg_gsq[si]=gval
ls=gamma_fit(q_exg[[si]], f_exg[[si]])
#return fit parameters and gsq values. Modify the function in hw2
fpar=ls[[1]]
gval=ls[[2]]
fkap[si] = fpar[1]
fth[si] = fpar[2]
f_gam_gsq[si]=gval
#show progress updates
cnt=cnt+1
if(cnt%%upfreq==0) print(cnt)
}
par(mfrow=c(2,2),mar=c(5,5,2,2))
hist(f_exg_gsq,50,freq=F, main = "G_squared of exg fits")
hist(f_gam_gsq,50,freq=F, main = "G_squared of gamma fits")
vg=seq(0,max(f_gam_gsq),length.out=1000)
points(vg,dchisq(vg,3),type='l',lwd=2)
hist(f_gam_gsq-f_exg_gsq,50,freq=F, main = "G_squared of difference of fits")
plot(c(true_mu, true_sig, true_tau), c(fmu, fsig, ftau), pch = c(1, 4, 2), col = c('black', 'blue', 'red'))
q_exg = c()
f_exg = c()
q_gam = gam[1]
f_gam = gam[2]
fmu=c() #vectors of fit values from simulation (all pars from mu free model)
fsig=c()
ftau=c()
fmu2=c()
fgsq=c() # for the morel with mu free across conds
fgsq2=c() # for the model with all pars fixed across conds
f_exg_gsq = c()
f_gam_gsq = c()
fkap = c() #kappa
fth = c()  #theta
cnt=0
upfreq = 40
for(si in 1:nsim){
#runs the sim function above
exg=exgsim(true_mu[si],true_sig[si],true_tau[si],N)
q_exg[si]=exg[1]
f_exg[si] = exg[2]
#Creates a vector of observed frequency
#  counts in each RT bin separated by
#  quantiles from the exgsim function
ls=exgauss_fit(q_exg[[si]], f_exg[[si]])
#return fit parameters and gsq values. Modify the function in exgaussgsqfit.r
fpar=ls[[1]]
gval=ls[[2]]
fmu[si]=fpar[1]
fsig[si]=fpar[2]
ftau[si]=fpar[3]
f_exg_gsq[si]=gval
ls=gamma_fit(q_exg[[si]], f_exg[[si]])
#return fit parameters and gsq values. Modify the function in hw2
fpar=ls[[1]]
gval=ls[[2]]
fkap[si] = fpar[1]
fth[si] = fpar[2]
f_gam_gsq[si]=gval
#show progress updates
cnt=cnt+1
if(cnt%%upfreq==0) print(cnt)
}
par(mfrow=c(2,2),mar=c(5,5,2,2))
hist(f_exg_gsq,50,freq=F, main = "G_squared of exg fits")
vg=seq(0,max(f_exg_gsq),length.out=1000)
points(vg,dchisq(vg,3),type='l',lwd=2)
hist(f_gam_gsq,50,freq=F, main = "G_squared of gamma fits")
hist(f_gam_gsq-f_exg_gsq,50,freq=F, main = "G_squared of difference of fits")
plot(c(true_mu, true_sig, true_tau), c(fmu, fsig, ftau), pch = c(1, 4, 2), col = c('black', 'blue', 'red'))
q_exg = c()
f_exg = c()
q_gam = gam[1]
f_gam = gam[2]
fmu=c() #vectors of fit values from simulation (all pars from mu free model)
fsig=c()
ftau=c()
fmu2=c()
fgsq=c() # for the morel with mu free across conds
fgsq2=c() # for the model with all pars fixed across conds
f_exg_gsq = c()
f_gam_gsq = c()
fkap = c() #kappa
fth = c()  #theta
cnt=0
upfreq = 40
for(si in 1:nsim){
#runs the sim function above
gammaSim(N, true_shape[si], true_scale[si])
q_gam[si]=exg[1]
f_gam[si] = exg[2]
ls=exgauss_fit(q_exg[[si]], f_exg[[si]])
#return fit parameters and gsq values. Modify the function in exgaussgsqfit.r
fpar=ls[[1]]
gval=ls[[2]]
fmu[si]=fpar[1]
fsig[si]=fpar[2]
ftau[si]=fpar[3]
f_exg_gsq[si]=gval
ls=gamma_fit(q_exg[[si]], f_exg[[si]])
#return fit parameters and gsq values. Modify the function in hw2
fpar=ls[[1]]
gval=ls[[2]]
fkap[si] = fpar[1]
fth[si] = fpar[2]
f_gam_gsq[si]=gval
#show progress updates
cnt=cnt+1
if(cnt%%upfreq==0) print(cnt)
}
true_shape
true_scale
gam = gammaSim(N, true_shape[1], true_scale[1])
gam
q_exg = c()
f_exg = c()
q_gam = gam[1]
f_gam = gam[2]
fmu=c() #vectors of fit values from simulation (all pars from mu free model)
fsig=c()
ftau=c()
fmu2=c()
fgsq=c() # for the morel with mu free across conds
fgsq2=c() # for the model with all pars fixed across conds
f_exg_gsq = c()
f_gam_gsq = c()
fkap = c() #kappa
fth = c()  #theta
cnt=0
upfreq = 40
for(si in 1:nsim){
#runs the sim function above
gammaSim(N, true_shape[si], true_scale[si])
q_gam[si]=exg[1]
f_gam[si] = exg[2]
ls=exgauss_fit(q_gam[[si]], f_gam[[si]])
#return fit parameters and gsq values. Modify the function in exgaussgsqfit.r
fpar=ls[[1]]
gval=ls[[2]]
fmu[si]=fpar[1]
fsig[si]=fpar[2]
ftau[si]=fpar[3]
f_exg_gsq[si]=gval
ls=gamma_fit(q_gam[[si]], f_gam[[si]])
#return fit parameters and gsq values. Modify the function in hw2
fpar=ls[[1]]
gval=ls[[2]]
fkap[si] = fpar[1]
fth[si] = fpar[2]
f_gam_gsq[si]=gval
#show progress updates
cnt=cnt+1
if(cnt%%upfreq==0) print(cnt)
}
par(mfrow=c(2,2),mar=c(5,5,2,2))
hist(f_exg_gsq,50,freq=F, main = "G_squared of exg fits")
hist(f_gam_gsq,50,freq=F, main = "G_squared of gamma fits")
vg=seq(0,max(f_gam_gsq),length.out=1000)
points(vg,dchisq(vg,3),type='l',lwd=2)
f_exg_gsq
q_exg = c()
f_exg = c()
q_gam = gam[1]
f_gam = gam[2]
fmu=c() #vectors of fit values from simulation (all pars from mu free model)
fsig=c()
ftau=c()
fmu2=c()
fgsq=c() # for the morel with mu free across conds
fgsq2=c() # for the model with all pars fixed across conds
f_exg_gsq = c()
f_gam_gsq = c()
fkap = c() #kappa
fth = c()  #theta
cnt=0
upfreq = 40
for(si in 1:nsim){
#runs the sim function above
gammaSim(N, true_shape[si], true_scale[si])
q_gam[si]=exg[1]
f_gam[si] = exg[2]
ls=exgauss_fit(q_gam[[si]], f_gam[[si]])
#return fit parameters and gsq values. Modify the function in exgaussgsqfit.r
fpar=ls[[1]]
gval=ls[[2]]
fmu[si]=fpar[1]
fsig[si]=fpar[2]
ftau[si]=fpar[3]
f_exg_gsq[si]=gval
ls=gamma_fit(q_gam[[si]], f_gam[[si]])
#return fit parameters and gsq values. Modify the function in hw2
fpar=ls[[1]]
gval=ls[[2]]
fkap[si] = fpar[1]
fth[si] = fpar[2]
f_gam_gsq[si]=gval
#show progress updates
cnt=cnt+1
if(cnt%%upfreq==0) print(cnt, f_exg_gsq)
}
f_exg_gsq
q_exg = c()
f_exg = c()
q_gam = gam[1]
f_gam = gam[2]
fmu=c() #vectors of fit values from simulation (all pars from mu free model)
fsig=c()
ftau=c()
fmu2=c()
fgsq=c() # for the morel with mu free across conds
fgsq2=c() # for the model with all pars fixed across conds
f_exg_gsq = c()
f_gam_gsq = c()
fkap = c() #kappa
fth = c()  #theta
cnt=0
upfreq = 40
for(si in 1:nsim){
#runs the sim function above
gammaSim(N, true_shape[si], true_scale[si])
q_gam[si]=exg[1]
f_gam[si] = exg[2]
ls=exgauss_fit(q_gam[[si]], f_gam[[si]])
#return fit parameters and gsq values. Modify the function in exgaussgsqfit.r
fpar=ls[[1]]
gval=ls[[2]]
fmu[si]=fpar[1]
fsig[si]=fpar[2]
ftau[si]=fpar[3]
f_exg_gsq[si]=gval
ls=gamma_fit(q_gam[[si]], f_gam[[si]])
#return fit parameters and gsq values. Modify the function in hw2
fpar=ls[[1]]
gval=ls[[2]]
fkap[si] = fpar[1]
fth[si] = fpar[2]
f_gam_gsq[si]=gval
#show progress updates
cnt=cnt+1
if(cnt%%upfreq==0) {
print(cnt)
print(f_exg_gsq)
}
}
for(si in 1:nsim){
#runs the sim function above
gammaSim(N, true_shape[si], true_scale[si])
q_gam[si]=exg[1]
f_gam[si] = exg[2]
ls=exgauss_fit(q_gam[[si]], f_gam[[si]])
#return fit parameters and gsq values. Modify the function in exgaussgsqfit.r
fpar=ls[[1]]
gval=ls[[2]]
fmu[si]=fpar[1]
fsig[si]=fpar[2]
ftau[si]=fpar[3]
f_exg_gsq[si]=gval
ls=gamma_fit(q_gam[[si]], f_gam[[si]])
#return fit parameters and gsq values. Modify the function in hw2
fpar=ls[[1]]
gval=ls[[2]]
fkap[si] = fpar[1]
fth[si] = fpar[2]
f_gam_gsq[si]=gval
#show progress updates
cnt=cnt+1
if(cnt%%upfreq==0) {
print(cnt)
print(q_gam[si])
}
}
true_shape
q_exg = c()
f_exg = c()
q_gam = gam[1]
f_gam = gam[2]
fmu=c() #vectors of fit values from simulation (all pars from mu free model)
fsig=c()
ftau=c()
fmu2=c()
fgsq=c() # for the morel with mu free across conds
fgsq2=c() # for the model with all pars fixed across conds
f_exg_gsq = c()
f_gam_gsq = c()
fkap = c() #kappa
fth = c()  #theta
cnt=0
upfreq = 40
for(si in 1:nsim){
#runs the sim function above
gam = gammaSim(N, true_shape[si], true_scale[si])
q_gam[si]=gam[1]
f_gam[si] = gam[2]
ls=exgauss_fit(q_gam[[si]], f_gam[[si]])
#return fit parameters and gsq values. Modify the function in exgaussgsqfit.r
fpar=ls[[1]]
gval=ls[[2]]
fmu[si]=fpar[1]
fsig[si]=fpar[2]
ftau[si]=fpar[3]
f_exg_gsq[si]=gval
ls=gamma_fit(q_gam[[si]], f_gam[[si]])
#return fit parameters and gsq values. Modify the function in hw2
fpar=ls[[1]]
gval=ls[[2]]
fkap[si] = fpar[1]
fth[si] = fpar[2]
f_gam_gsq[si]=gval
#show progress updates
cnt=cnt+1
if(cnt%%upfreq==0) {
print(cnt)
#print(q_gam[si])
}
}
par(mfrow=c(2,2),mar=c(5,5,2,2))
hist(f_exg_gsq,50,freq=F, main = "G_squared of exg fits")
hist(f_gam_gsq,50,freq=F, main = "G_squared of gamma fits")
vg=seq(0,max(f_gam_gsq),length.out=1000)
points(vg,dchisq(vg,2),type='l',lwd=2)
hist(f_gam_gsq-f_exg_gsq,50,freq=F, main = "G_squared of difference of fits")
par(mfrow=c(2,2),mar=c(5,5,2,2))
hist(f_exg_gsq,50,freq=F, main = "G_squared of exg fits")
hist(f_gam_gsq,50,freq=F, main = "G_squared of gamma fits")
vg=seq(0,max(f_gam_gsq),length.out=1000)
points(vg,dchisq(vg,2),type='l',lwd=2)
hist(f_exg_gsq-f_gam_gsq,50,freq=F, main = "G_squared of difference of fits")
plot(c(true_mu, true_sig, true_tau), c(fmu, fsig, ftau), pch = c(1, 4, 2), col = c('black', 'blue', 'red'))
plot(c(true_shape, true_scale), c(fkap, fth), pch = c(1, 4), col = c('black', 'blue'))
par(mfrow=c(2,2),mar=c(5,5,2,2))
hist(f_exg_gsq,50,freq=F, main = "G_squared of exg fits")
hist(f_gam_gsq,50,freq=F, main = "G_squared of gamma fits")
vg=seq(0,max(f_gam_gsq),length.out=1000)
points(vg,dchisq(vg,2),type='l',lwd=2)
hist(f_exg_gsq-f_gam_gsq,50,freq=F, main = "G_squared of difference of fits")
plot(c(true_shape, true_scale), c(fkap, fth), pch = c(1, 4), col = c('black', 'blue'))
true_scale
fth
plot(true_shape, fkap, pch = 1, col = 'black)'
plot(c(true_shape, true_scale), c(fkap, fth), pch = c(1, 4), col = c('black', 'blue'))
plot(true_shape, fkap, pch = 1, col = 'black')
points(true_scale, fth, pch = 4, col = 'blue')
plot(true_shape, fkap, pch = 1, col = 'black', xlim = c(0, max(true_shape)))
points(true_scale, fth, pch = 4, col = 'blue')
plot(true_scale, fth, pch = 4, col = 'blue')
points(c(true_shape, true_scale), c(fkap, fth), pch = c(1, 4), col = c('black', blue'))
plot(true_scale, fth, pch = 4, col = 'blue')
plot(c(true_shape, true_scale), c(fkap, fth), pch = c(1, 4), col = c('black', 'blue'))
#Q5
#The ex-gaussian fits decent here as evident by high density at lower g-squared values.
#Expected because ex-gaussian has more free parameters than the data generated from gamma distribution (3 vs 2)
#The gamma distribution seems to fit well to its own data too. The density aligns with the bold
#line for a chi-squared with 2 degrees of freedom indicating gamma's 2 parameters
points(c(true_shape, true_scale), c(fkap, fth), pch = c(1, 4), col = c('black', 'blue'))
par(mfrow=c(2,2),mar=c(5,5,2,2))
points(c(true_shape, true_scale), c(fkap, fth), pch = c(1, 4), col = c('black', 'blue'))
par(mfrow=c(2,2),mar=c(5,5,2,2))
points(c(true_shape, true_scale), c(fkap, fth), pch = c(1, 4), col = c('black', 'blue'))
par(mfrow=c(2,2),mar=c(5,5,2,2))
hist(f_exg_gsq,50,freq=F, main = "G_squared of exg fits")
hist(f_gam_gsq,50,freq=F, main = "G_squared of gamma fits")
vg=seq(0,max(f_gam_gsq),length.out=1000)
points(vg,dchisq(vg,2),type='l',lwd=2)
hist(f_exg_gsq-f_gam_gsq,50,freq=F, main = "G_squared of difference of fits")
points(c(true_shape, true_scale), c(fkap, fth), pch = c(1, 4), col = c('black', 'blue'))
plot(true_shape, fkap, pch = 1, col = 'black', xlim = c(0, max(true_shape)))
points(c(true_shape, true_scale), c(fkap, fth), pch = c(1, 4), col = c('black', 'blue'))
plot(true_shape, fkap, pch = 1, col = 'black', xlim = c(0, max(true_shape)))
points(true_scale,fth, pch = 4, col = 'blue')
plot(true_shape, fkap, pch = 1, col = 'black', xlim = c(0, max(true_shape)), ylim = c(0, max(fkap)))
points(true_scale,fth, pch = 4, col = 'blue')
upfreq = 40
for(si in 1:nsim){
#runs the sim function above
exg=exgsim(true_mu[si],true_sig[si],true_tau[si],N)
q_exg[si]=exg[1]
f_exg[si] = exg[2]
#Creates a vector of observed frequency
#  counts in each RT bin separated by
#  quantiles from the exgsim function
ls=exgauss_fit(q_exg[[si]], f_exg[[si]])
#return fit parameters and gsq values. Modify the function in exgaussgsqfit.r
fpar=ls[[1]]
gval=ls[[2]]
fmu[si]=fpar[1]
fsig[si]=fpar[2]
ftau[si]=fpar[3]
f_exg_gsq[si]=gval
ls=gamma_fit(q_exg[[si]], f_exg[[si]])
#return fit parameters and gsq values. Modify the function in hw2
fpar=ls[[1]]
gval=ls[[2]]
fkap[si] = fpar[1]
fth[si] = fpar[2]
f_gam_gsq[si]=gval
#show progress updates
cnt=cnt+1
if(cnt%%upfreq==0) print(cnt)
}
par(mfrow=c(2,2),mar=c(5,5,2,2))
hist(f_exg_gsq,50,freq=F, main = "G_squared of exg fits")
vg=seq(0,max(f_exg_gsq),length.out=1000)
points(vg,dchisq(vg,3),type='l',lwd=2)
hist(f_gam_gsq,50,freq=F, main = "G_squared of gamma fits")
hist(f_gam_gsq-f_exg_gsq,50,freq=F, main = "G_squared of difference of fits")
plot(true_mu, fmu, pch = 1, col = 'blue', xlim = c(-1, 2), ylim = c(-1, 2))
points(true_sig, fsig, pch = 4, col = 'blue')
par(mfrow=c(2,2),mar=c(5,5,2,2))
hist(f_exg_gsq,50,freq=F, main = "G_squared of exg fits")
vg=seq(0,max(f_exg_gsq),length.out=1000)
points(vg,dchisq(vg,3),type='l',lwd=2)
hist(f_gam_gsq,50,freq=F, main = "G_squared of gamma fits")
hist(f_gam_gsq-f_exg_gsq,50,freq=F, main = "G_squared of difference of fits")
plot(true_mu, fmu, pch = 1, col = 'black', xlim = c(-1, 2), ylim = c(-1, 2))
points(true_sig, fsig, pch = 4, col = 'blue')
points(true_tau, ftau, pch = 2, col = 'red')
q_exg = c()
f_exg = c()
q_gam = gam[1]
f_gam = gam[2]
fmu=c() #vectors of fit values from simulation (all pars from mu free model)
fsig=c()
ftau=c()
fmu2=c()
fgsq=c() # for the morel with mu free across conds
fgsq2=c() # for the model with all pars fixed across conds
f_exg_gsq = c()
f_gam_gsq = c()
fkap = c() #kappa
fth = c()  #theta
cnt=0
upfreq = 40
for(si in 1:nsim){
#runs the sim function above
gam = gammaSim(N, true_shape[si], true_scale[si])
q_gam[si]=gam[1]
f_gam[si] = gam[2]
ls=exgauss_fit(q_gam[[si]], f_gam[[si]])
#return fit parameters and gsq values. Modify the function in exgaussgsqfit.r
fpar=ls[[1]]
gval=ls[[2]]
fmu[si]=fpar[1]
fsig[si]=fpar[2]
ftau[si]=fpar[3]
f_exg_gsq[si]=gval
ls=gamma_fit(q_gam[[si]], f_gam[[si]])
#return fit parameters and gsq values. Modify the function in hw2
fpar=ls[[1]]
gval=ls[[2]]
fkap[si] = fpar[1]
fth[si] = fpar[2]
f_gam_gsq[si]=gval
#show progress updates
cnt=cnt+1
if(cnt%%upfreq==0) {
print(cnt)
#print(q_gam[si])
}
}
par(mfrow=c(2,2),mar=c(5,5,2,2))
hist(f_exg_gsq,50,freq=F, main = "G_squared of exg fits")
hist(f_gam_gsq,50,freq=F, main = "G_squared of gamma fits")
vg=seq(0,max(f_gam_gsq),length.out=1000)
points(vg,dchisq(vg,2),type='l',lwd=2)
hist(f_exg_gsq-f_gam_gsq,50,freq=F, main = "G_squared of difference of fits")
plot(true_shape, fkap, pch = 1, col = 'black', xlim = c(0, max(true_shape)), ylim = c(0, max(fkap)))
points(true_scale,fth, pch = 4, col = 'blue')
bicA = devA + fA * log(N)
bicB = devB + fB * log(N)
bicC = devC + fC * log(N)
devA = 550
devB = 545
devD = 541
devC = 552
fA = 3
fB = 4
fC = 3
fD = 5
N = 1000
bicA = devA + fA * log(N)
bicB = devB + fB * log(N)
bicC = devC + fC * log(N)
bicD = devD + fD * log(N)
wA = bicA/(bicA + bicB + bicC + bicD)
wB = bicB/(bicA + bicB + bicC + bicD)
wC = bicC/(bicA + bicB + bicC + bicD)
wD = bicD/(bicA + bicB + bicC + bicD)
bicA
bicB
bicC
bicD
wA
wB
wC
wD
wAB = (devA/devB)*(N^((fB-fA)/2))
wAB = (devA/devB)*(N^((fB-fA)/2))
wBC = (devB/devC)*(N^((fC-fB)/2))
wDA = (devD/devA)*(N^((fA-fD)/2))
wCD = (devC/devD)*(N^((fD-fC)/2))
wAB
wBC
wCD
wDA
source('~/Psych 891 Modelling cog dynamics/Codes/HW4Savalia.R', echo=TRUE)
