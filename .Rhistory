out=0 #just a variable to control when the loop stops
while(out==0){
fit=optim(par,gsqfun,dat=f,q=q)
par=fit$par
if((comp-fit$value)<=.001) out=1
comp=fit$value
}
fit=optim(par,gsqfun,freq=freq,q=q)
par=fit$par
if((comp-fit$value)<=.001) out=1
comp=fit$value
while(out==0){
fit=optim(par,gsqfun,freq=freq,q=q)
par=fit$par
if((comp-fit$value)<=.001) out=1
comp=fit$value
}
comp
par
gammaPred(c(kappa, theta), q)
gammaPred(c(kappa, theta), q)
q*N
gammaPred(c(kappa, theta), q)*N
freq
gammaPred(par, q)
gammaPred(par, q)*N
freq
gsqfun(par, q, freq)
gsqfun(c(2, 1), q, freq)
gsqfun(c(2, 3), q, freq)
gsqfun(par, q, freq)
gsqfun <- function(par, q, freq){
p = gammaPred(par, q)
p = p/sum(p)
#print (p)
pf = p*sum(freq)
pf
gslev=1:length(freq)
gslev=gslev[freq>0]
gsq=2*sum(freq[gslev]*log(freq[gslev]/pf[gslev]))
return (gsq)
}
gsqfun(c(2, 3), q, freq)
gsqfun(par, q, freq)
fit
while(TRUE){
fit=optim(par,gsqfun,freq=freq,q=q)
par=fit$par
if((comp-fit$value)<=.001) break
comp=fit$value
}
comp
par = c(2, 3)
comp = gsqfun(par, q, freq)
comp
while(TRUE){
fit=optim(par,gsqfun,freq=freq,q=q)
par=fit$par
if((comp-fit$value)<=.001) break
comp=fit$value
}
comp
pars = c(c(1, 2), c(1, 3), c(1, 4), c(2, 1), c(2, 3), c(2, 4), c(3, 1), c(3, 2), c(3, 4), c(4, 1))
for (i in length(pars)){
comp = gsqfun(pars[i], q, freq)
while(TRUE){
fit=optim(pars[i],gsqfun,freq=freq,q=q)
pars[i]=fit$pars[i]
if((comp-fit$value)<=.001) break
comp=fit$value
}
}
pars[1]
pars = c(c(1, 2), c(1, 3), c(1, 4), c(2, 1), c(2, 3), c(2, 4), c(3, 1), c(3, 2), c(3, 4), c(4, 1))
pars[1]
pars[1, 1]
pars[2]
pars = matrix(c(1, 2), c(1, 3), c(1, 4), c(2, 1), c(2, 3), c(2, 4), c(3, 1), c(3, 2), c(3, 4), c(4, 1))
pars = matrix(c(1, 1, 1, 2, 2, 2, 3, 3, 3, 4), c(2, 3, 4, 2, 3, 4, 2, 3, 4, 2))
pars[2]
pars[2, ]
pars
?matrix
pars = matrix(c(1, 1, 1, 2, 2, 2, 3, 3, 3, 4), c(2, 3, 4, 2, 3, 4, 2, 3, 4, 2), byrow=TRUE)
pars
pars = matrix(c(1, 1, 1, 2, 2, 2, 3, 3, 3, 4), c(2, 3, 4, 2, 3, 4, 2, 3, 4, 2), byrow=FALSE)
pars
pars[,1]
pars = matrix(c(1, 2, 1, 3, 1, 4, 2, 1, 2, ,3, 2, 4, 3, 1, 3, 2, 3, 4, 4, 1))
pars = matrix(c(1, 2, 1, 3, 1, 4, 2, 1, 2, 3, 2, 4, 3, 1, 3, 2, 3, 4, 4, 1))
pars[,1]
pars
pars = matrix(c(1, 2, 1, 3, 1, 4, 2, 1, 2, 3, 2, 4, 3, 1, 3, 2, 3, 4, 4, 1), nrow = 10, ncol = 2)
pars
pars[1, ]
comp = gsqfun(pars[i, ], q, freq)
pars = matrix(c(1, 2, 1, 3, 1, 4, 2, 1, 2, 3, 2, 4, 3, 1, 3, 2, 3, 4, 4, 1), nrow = 10, ncol = 2)
pars[1, ]
for (i in length(pars[, 1])){
comp = gsqfun(pars[i, ], q, freq)
while(TRUE){
fit=optim(pars[i],gsqfun,freq=freq,q=q)
pars[i]=fit$pars[i]
if((comp-fit$value)<=.001) break
comp=fit$value
}
}
comp = gsqfun(pars[i, ], q, freq)
print pars[i, ]
pars[i, ]
for (i in length(pars[, 1])){
comp = gsqfun(pars[i, ], q, freq)
while(TRUE){
fit=optim(pars[i, ],gsqfun,freq=freq,q=q)
pars[i, ]=fit$pars[i, ]
if((comp-fit$value)<=.001) break
comp=fit$value
}
}
fit
for (i in c(1:10)){
par = c(2, 3)
comp = gsqfun(par, q, freq)
while(TRUE){
fit=optim(par,gsqfun,freq=freq,q=q)
par=fit$par
if((comp-fit$value)<=.001) break
comp=fit$value
}
}
pars = c()
pars = c()
for (i in c(1:10)){
par = c(2, 3)
comp = gsqfun(par, q, freq)
while(TRUE){
fit=optim(par,gsqfun,freq=freq,q=q)
par=fit$par
if((comp-fit$value)<=.001) break
comp=fit$value
}
pars = c(pars, par)
}
pars
par = c(2, 3)
for (i in c(1:10)){
par = c(2, 3)
q = gammaSim(N, kappa, theta)
comp = gsqfun(par, q, freq)
while(TRUE){
fit=optim(par,gsqfun,freq=freq,q=q)
par=fit$par
if((comp-fit$value)<=.001) break
comp=fit$value
}
pars = c(pars, par)
}
pars
pars = c()
for (i in c(1:10)){
par = c(2, 3)
q = gammaSim(N, kappa, theta)
comp = gsqfun(par, q, freq)
while(TRUE){
fit=optim(par,gsqfun,freq=freq,q=q)
par=fit$par
if((comp-fit$value)<=.001) break
comp=fit$value
}
pars = c(pars, par)
}
pars
pars = list()
for (i in c(1:10)){
par = c(2, 3)
q = gammaSim(N, kappa, theta)
comp = gsqfun(par, q, freq)
while(TRUE){
fit=optim(par,gsqfun,freq=freq,q=q)
par=fit$par
if((comp-fit$value)<=.001) break
comp=fit$value
}
pars[[i]] = c(pars, par)
}
pars
pars = list()
for (i in c(1:10)){
par = c(2, 3)
q = gammaSim(N, kappa, theta)
comp = gsqfun(par, q, freq)
while(TRUE){
fit=optim(par,gsqfun,freq=freq,q=q)
par=fit$par
if((comp-fit$value)<=.001) break
comp=fit$value
}
pars[i] = c(pars, par)
}
pars = list()
for (i in c(1:10)){
par = c(2, 3)
q = gammaSim(N, kappa, theta)
comp = gsqfun(par, q, freq)
while(TRUE){
fit=optim(par,gsqfun,freq=freq,q=q)
par=fit$par
if((comp-fit$value)<=.001) break
comp=fit$value
}
pars[i] = par
}
pars[i] = par
pars = list()
for (i in c(1:10)){
par = c(2, 3)
q = gammaSim(N, kappa, theta)
comp = gsqfun(par, q, freq)
while(TRUE){
fit=optim(par,gsqfun,freq=freq,q=q)
par=fit$par
if((comp-fit$value)<=.001) break
comp=fit$value
}
pars[[i]] = par
}
pars
mean(pars[, 1])
mean(pars[1])
mean(pars[[1]])
pars[[1]]
pars[[:]]
pars[[,]]
pars
pars[[1, 1]]
pars[[1], 1]
pars[[1][1]]
lapply(pars, '[', 1)
lapply(pars, '[', 2)
mean(lapply(pars, '[', 1))
lapply(pars, '[', 1)
lapply(pars, '[', 1)[1]
mean(lapply(pars, '[', 1))
type(lapply(pars, '[', 1))
lapply(pars, mean, 1)
lapply(pars, mean, 1)
?lapply
pars = data.frame()
for (i in c(1:10)){
par = c(2, 3)
q = gammaSim(N, kappa, theta)
comp = gsqfun(par, q, freq)
while(TRUE){
fit=optim(par,gsqfun,freq=freq,q=q)
par=fit$par
if((comp-fit$value)<=.001) break
comp=fit$value
}
pars[[i]] = par
}
pars = data.frame(c(0, 0))
for (i in c(1:10)){
par = c(2, 3)
q = gammaSim(N, kappa, theta)
comp = gsqfun(par, q, freq)
while(TRUE){
fit=optim(par,gsqfun,freq=freq,q=q)
par=fit$par
if((comp-fit$value)<=.001) break
comp=fit$value
}
pars[[i]] = par
}
pars
pars = data.frame(c(0, 0))
for (i in c(1:10)){
par = c(2, 3)
q = gammaSim(N, kappa, theta)
comp = gsqfun(par, q, freq)
while(TRUE){
fit=optim(par,gsqfun,freq=freq,q=q)
par=fit$par
if((comp-fit$value)<=.001) break
comp=fit$value
}
pars[[i]] = par
}
pars
pars = data.frame(c(0, 0))
for (i in c(1:10)){
par = c(2, 3)
q = gammaSim(N, kappa, theta)
comp = gsqfun(par, q, freq)
while(TRUE){
fit=optim(par,gsqfun,freq=freq,q=q)
par=fit$par
if((comp-fit$value)<=.001) break
comp=fit$value
}
pars[i] = par
}
pars
pars[1]
pars[1, ]
kappa_mean = mean(pars[1,])
pars[1,]
mean(pars[1,])
rowMeans(pars[1,])
kappa_sd = rowSds(pars[1,]) (pars[1, ])
kappa_sd = rowSds(pars[1,])
library(matrixStats)
sd(row(pars[1,]))
row(pars[1,])
pars[1, ]
c(pars[1, ])
sd(c(pars[1, ]))
row(pars[1, ])
?apply
apply(pars[1,])
apply(pars[1,], sd)
apply(pars, 1, sd)
pars[1]
kappa_sd = apply(pars, 1, sd)[1]
kappa_sd
kappa_mean = apply(pars, 1, mean)[1]
kappa_sd = apply(pars, 1, sd)[1]
theta_mean = apply(pars, 1, mean)[2]
theta_sd = apply(pars, 1, sd)[2]
N = 50
pars = data.frame(c(0, 0))
for (i in c(1:10)){
par = c(2, 3)
q = gammaSim(N, kappa, theta)
comp = gsqfun(par, q, freq)
while(TRUE){
fit=optim(par,gsqfun,freq=freq,q=q)
par=fit$par
if((comp-fit$value)<=.001) break
comp=fit$value
}
pars[i] = par
}
kappa_mean2 = apply(pars, 1, mean)[1]
kappa_sd2 = apply(pars, 1, sd)[1]
theta_mean2 = apply(pars, 1, mean)[2]
theta_sd2 = apply(pars, 1, sd)[2]
kappa_mean
kappa_mean2
kappa_sd
kappa_sd2
theta_mean
theta_mean2
theta_sd
theta_sd2
kappa = 1
theta = 5
N = 1000
gammaSim <- function(N, kappa, theta){
x <- rgamma(N, shape = kappa, scale = theta)
hist(x, freq = FALSE, breaks = 30, col = "grey")
#Plotting lines
xfit = seq(min(gam), max(gam), length = 2000)
yfit = dgamma(xfit, shape = kappa, scale = theta)
lines(xfit, yfit)
q=quantile(x,c(.1,.3,.5,.7,.9))
abline(v=q)
return (q)
}
q = gammaSim(N, kappa, theta)
q
gammaPred <- function(par, q){
#Parameters
kappa = par[1]
theta = par[2]
#Cuts for quantiles
cuts = c(0, q, Inf)
p = c()
for (i in (1:length(cuts)-1)){
p[i] = pgamma(cuts[i+1], kappa, scale = theta) - pgamma(cuts[i], kappa, scale = theta)
}
return(p)
}
gammaPred(c(kappa, theta), q)
kappa = 1
theta = 5
N = 1000
gammaSim <- function(N, kappa, theta){
x <- rgamma(N, shape = kappa, scale = theta)
hist(x, freq = FALSE, breaks = 30, col = "grey")
#Plotting lines
xfit = seq(min(gam), max(gam), length = 2000)
yfit = dgamma(xfit, shape = kappa, scale = theta)
lines(xfit, yfit)
q=quantile(x,c(.1,.3,.5,.7,.9))
abline(v=q)
return (q)
}
q = gammaSim(N, kappa, theta)
q
gammaPred <- function(par, q){
#Parameters
kappa = par[1]
theta = par[2]
#Cuts for quantiles
cuts = c(0, q, Inf)
p = c()
for (i in (1:length(cuts)-1)){
p[i] = pgamma(cuts[i+1], kappa, scale = theta) - pgamma(cuts[i], kappa, scale = theta)
}
return(p)
}
gammaPred(c(kappa, theta), q)
pars = data.frame(c(0, 0))
par = c(2, 3)
q = gammaSim(N, kappa, theta)
N = 500
kappa = 4
theta = 3
pars = data.frame(c(0, 0))
par = c(2, 3)
q = gammaSim(N, kappa, theta)
comp = gsqfun(par, q, freq)
gsqfun <- function(par, q, freq){
p = gammaPred(par, q)
p = p/sum(p)
#print (p)
pf = p*sum(freq)
pf
gslev=1:length(freq)
gslev=gslev[freq>0]
gsq=2*sum(freq[gslev]*log(freq[gslev]/pf[gslev]))
return (gsq)
}
comp = gsqfun(par, q, freq)
freq = c(0.1, 0.2, 0.2, 0.2, 0.2, 0.1)*N
comp = gsqfun(par, q, freq)
comp
while(TRUE){
fit=optim(par,gsqfun,freq=freq,q=q)
par=fit$par
if((comp-fit$value)<=.001) break
comp=fit$value
}
pars[i] = par
pars = data.frame(c(0, 0))
for (i in c(1:10)){
par = c(2, 3)
q = gammaSim(N, kappa, theta)
comp = gsqfun(par, q, freq)
while(TRUE){
fit=optim(par,gsqfun,freq=freq,q=q)
par=fit$par
if((comp-fit$value)<=.001) break
comp=fit$value
}
pars[i] = par
}
comp
dwald <- function(rt, mu, lambda){
sqrt(lambda/(2*pi*rt^3))*exp(-lambda*(rt-mu)/(2*mu^2*rt))
}
dwald(1, 1, 1)
dwald(0.5, 1, 1)
dwald(2, 1, 1)
dwald(1, 1, 1)
library(SuppDists)
dwald(1, 2, 1)
f = c(45, 67, 23, 88)
n = sum(f)
fprop = f/n
fprop
f = c(45, 67, 23, 88)
n = sum(f)
fprop = f/n
devf =  -2*(dmultinom(f,n,fprop,log=T))
gsq_model = 3.2
dev_model = devf+gsq
dev_model = devf+gsq_model
dev_model
dev_model = 140
ll = dev_model/-2
ll
p_a = 9/(9+1)
p_b = 1/(9+1)
p_a
MA_AIC = 450
MB_AIC = 452
MC_AIC = 446
min_aic = 446
del_AIC_A = 4
del_AIC_B = 6
del_AIC_C = 0
denom = exp(-del_AIC_A/2) + exp(-del_AIC_B/2) + exp(-del_AIC_C/2)
w_AIC_A = exp((-del_AIC_A/2))/denom
w_AIC_B = exp((-del_AIC_B/2))/denom
w_AIC_C = exp((-del_AIC_C/2))/denom
w_AIC_A
w_AIC_B
w_AIC_C
gdiff = 12.3 - 18.1
p = 1 - pchisq(gdiff, 3)
p
p = 1 - pchisq(gdiff, df=3)
p
q1=c(0.6417067,0.8118283,0.967615,1.235573,1.807976)
q2=c(0.6579347,0.8144716,0.9833921,1.270491,1.811078)
N1 = 1000
N2 = 1000
f1=c(.1,.2,.2,.2,.2,.1)*N1
f2=c(.1,.2,.2,.2,.2,.1)*N2
source("Exg2conMufree.R")
ls=MuFreeFit(f1,q1,f2,q2)
