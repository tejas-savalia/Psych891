if(cnt%%upfreq==0) {
print(cnt)
#print(q_gam[si])
}
}
par(mfrow=c(2,2),mar=c(5,5,2,2))
hist(f_exg_gsq,50,freq=F, main = "G_squared of exg fits")
#vg=seq(0,max(f_exg_gsq),length.out=1000)
#points(vg,dchisq(vg,3),type='l',lwd=2)
hist(f_gam_gsq,50,freq=F, main = "G_squared of gamma fits")
vg=seq(0,max(f_gam_gsq),length.out=1000)
points(vg,dchisq(vg,3),type='l',lwd=2)
hist(f_exg_gsq-f_gam_gsq,50,freq=F, main = "G_squared of difference of fits")
#vg=seq(0,max(fgsq2),length.out=1000)
#points(vg,dchisq(vg,1),type='l',lwd=2)
plot(true_shape, fkap, pch = 1, col = 'black', xlim = c(0, max(true_shape)), ylim = c(0, max(fkap)))
points(true_scale,fth, pch = 4, col = 'blue')
source('TruncNorm.R')
pwd
cwd
source('TruncNorm.R')
source('~/Psych 891 Modelling cog dynamics/Codes/Midterm/TruncNorm.R')
source('~/Psych 891 Modelling cog dynamics/Codes/Midterm/wald.R')
source('wald.R')
dir
getwd()
setwd('C:\Users\cemnlcmaplab\Documents\Psych 891 Modelling cog dynamics\Codes\Midterm')
setwd('C:\\Users\cemnlcmaplab\Documents\Psych 891 Modelling cog dynamics\Codes\Midterm')
setwd('C:\\Users\\cemnlcmaplab\\Documents\\Psych 891 Modelling cog dynamics\\Codes\\Midterm')
source('wald.R')
source('TruncNorm.R')
a = rtnorm(nsim, mu=0.15, sig = 0.05, lo = 0.05, hi = 0.30)
nsim = 2000
N = 250 #Number of Trials
a = rtnorm(nsim, mu=0.15, sig = 0.05, lo = 0.05, hi = 0.30)
v = rtnorm(nsim, mu = 0.3, sig = 0.1, lo = 0.1, hi = 0.5)
waldSimq(a[1], b[1], N)
waldSimq(a[1], v[1], N)
f = c(0.1, 0.2, 0.2, 0.2, 0.2, 0.1)*N
waldPred <- function(par, q){
#Parameters
a = par[1]
v = par[2]
#Cuts for quantiles
cuts = c(0, q, Inf)
p = c()
for (i in (1:length(cuts)-1)){
p[i] = pgamma(cuts[i+1], kappa, scale = theta) - pgamma(cuts[i], kappa, scale = theta)
}
return(p)
}
waldPred <- function(par, q){
#Parameters
a = par[1]
v = par[2]
#Cuts for quantiles
cuts = c(0, q, Inf)
p = c()
for (i in (1:length(cuts)-1)){
p[i] = pwald(cuts[i+1], a, v) - pwald(cuts[i], a, v)
}
return(p)
}
rnorm(1, 1, 1)
rnorm()
rnorm(1)
rnorm(1)
rnorm(2)
gsqfun_wald <- function(par, q, freq){
p = waldPred(par, q)
p = p/sum(p)
#print (p)
pf = p*sum(freq)
#pf
gslev=1:length(freq)
gslev=gslev[freq>0]
gsq=2*sum(freq[gslev]*log(freq[gslev]/pf[gslev]))
return (gsq)
}
wald_fit = function(q, f){
#Starting parameters
par = rnorm(2)
comp = gsqfun_wald(par, q, f)
while(TRUE){
fit=optim(par,gsqfun_wald,freq=f,q=q)
par=fit$par
if((comp-fit$value)<=.001) break
comp=fit$value
}
wald_par = par
gsq = gsqfun_gamma(par, q, f)
ls = list(wald_par, gsq)
return (ls)
}
wald_fit(wald_q, f)
wald_q = waldSimq(a[1], v[1], N)
f = c(0.1, 0.2, 0.2, 0.2, 0.2, 0.1)*N
f_a = c()
f_v = c()
f_gsq = c()
cnt = 0
upfreq = 50
wald_fit(wald_q, f)
pwald(1, a[1], v[1])
waldPred <- function(par, q){
#Parameters
a = par[1]
v = par[2]
#Cuts for quantiles
cuts = c(0, q, Inf)
p = c()
for (i in (1:length(cuts)-1)){
p[i] = pwald(cuts[i+1], a, v) - pwald(cuts[i], a, v)
p[i]
}
return(p)
}
wald_fit(wald_q, f)
pwald(0, a[1], v[1])
waldPred <- function(par, q){
#Parameters
a = par[1]
v = par[2]
#Cuts for quantiles
cuts = c(0, q, Inf)
p = c()
for (i in (1:length(cuts)-1)){
cuts[i]
p[i] = pwald(cuts[i+1], a, v) - pwald(cuts[i], a, v)
p[i]
}
return(p)
}
wald_fit(wald_q, f)
pwald(0, a[1], v[1])
source('wald.R')
wald_fit(wald_q, f)
pwald(0, a[1], v[1])
pwald(1, a[1], v[1])
wald_fit(wald_q, f)
print (cuts[i])
wald_fit(wald_q, f)
wald_fit(wald_q, f)
a = par[1]
par = c(1, 2)
a = par[1]
v = par[2]
cuts = c(0, q, Inf)
cuts
cuts = c(0, wald_q, Inf)
cuts
p = c()
for (i in (1:length(cuts)-1)){
print (cuts[i])
pwald(cuts[i], a, v)
#p[i] = pwald(cuts[i+1], a, v) - pwald(cuts[i], a, v)
#p[i]
}
print (cuts[i])
print (cuts[1])
pwald(cuts[1], a, v)
print (cuts[2])
pwald(cuts[2], a, v)
print (cuts[5])
print (cuts[7])
pwald(cuts[7], a, v)
for (i in (1:length(cuts)-1)){
print (cuts[7])
pwald(cuts[7], a, v)
#p[i] = pwald(cuts[i+1], a, v) - pwald(cuts[i], a, v)
#p[i]
}
for (i in (1:length(cuts)-1)){
print (cuts[i])
pwald(cuts[7], a, v)
#p[i] = pwald(cuts[i+1], a, v) - pwald(cuts[i], a, v)
#p[i]
}
pwald(cuts[i], a, v)
for (i in (1:length(cuts)-1)){
print (cuts[i])
pwald(cuts[i], a, v)
#p[i] = pwald(cuts[i+1], a, v) - pwald(cuts[i], a, v)
#p[i]
}
pwald(cuts[i+1], a, v)
for (i in (1:length(cuts)-1)){
print (cuts[i])
pwald(cuts[i+1], a, v)
#p[i] = pwald(cuts[i+1], a, v) - pwald(cuts[i], a, v)
#p[i]
}
for (i in (1:length(cuts)-1)){
print (cuts[i])
pwald(cuts[i+1], a, v)
#p[i] = pwald(cuts[i+1], a, v) - pwald(cuts[i], a, v)
#p[i]
}
for (i in (2:length(cuts))){
print (cuts[i])
pwald(cuts[i+1], a, v)
#p[i] = pwald(cuts[i+1], a, v) - pwald(cuts[i], a, v)
#p[i]
}
for (i in (2:length(cuts))){
print (cuts[i])
pwald(cuts[i-1], a, v)
#p[i] = pwald(cuts[i+1], a, v) - pwald(cuts[i], a, v)
#p[i]
}
for (i in (2:length(cuts))){
print (cuts[i])
pwald(cuts[i], a, v)
#p[i] = pwald(cuts[i+1], a, v) - pwald(cuts[i], a, v)
#p[i]
}
waldPred <- function(par, q){
par = c(1, 2)
#Parameters
a = par[1]
v = par[2]
#Cuts for quantiles
cuts = c(0, q, Inf)
cuts = c(0, wald_q, Inf)
p = c()
for (i in (2:length(cuts))){
#print (cuts[i])
#pwald(cuts[i], a, v)
p[i] = pwald(cuts[i], a, v) - pwald(cuts[i-1], a, v)
#p[i]
}
return(p)
}
wald_fit(wald_q, f)
wald_fit(wald_q, f)
wald_fit(wald_q, f)
par = rtnorm(2, mu = 2, sig = 1, lo = 0, hi = Inf)
wald_fit(wald_q, f)
par
wald_fit = function(q, f){
#Starting parameters
par = rtnorm(2, mu = 2, sig = 1, lo = 0, hi = Inf)
comp = gsqfun_wald(par, q, f)
while(TRUE){
fit=optim(par,gsqfun_wald,freq=f,q=q)
par=fit$par
if((comp-fit$value)<=.001) break
comp=fit$value
}
wald_par = par
gsq = gsqfun_gamma(par, q, f)
ls = list(wald_par, gsq)
return (ls)
}
wald_fit(wald_q, f)
gsqfun_wald <- function(par, q, freq){
p = waldPred(par, q)
p = p/sum(p)
#print (p)
pf = p*sum(freq)
pf
gslev=1:length(freq)
gslev=gslev[freq>0]
gsq=2*sum(freq[gslev]*log(freq[gslev]/pf[gslev]))
return (gsq)
}
wald_fit = function(q, f){
#Starting parameters
par = rtnorm(2, mu = 2, sig = 1, lo = 0, hi = Inf)
comp = gsqfun_wald(par, q, f)
while(TRUE){
fit=optim(par,gsqfun_wald,freq=f,q=q)
par=fit$par
if((comp-fit$value)<=.001) break
comp=fit$value
}
wald_par = par
gsq = gsqfun_gamma(par, q, f)
ls = list(wald_par, gsq)
return (ls)
}
wald_fit(wald_q, f)
par = rtnorm(2, mu = 2, sig = 1, lo = 0, hi = Inf)
comp = gsqfun_wald(par, q, f)
fit=optim(par,gsqfun_wald,freq=f,q=q)
comp
p = waldPred(par, q)
p = p/sum(p)
print (p)
waldPred(c(1, 2), wald_q)
waldPred <- function(par, q){
par = c(1, 2)
#Parameters
a = par[1]
v = par[2]
#Cuts for quantiles
cuts = c(0, q, Inf)
#cuts = c(0, wald_q, Inf)
p = c()
for (i in (2:length(cuts))){
#print (cuts[i])
#pwald(cuts[i], a, v)
p[i] = pwald(cuts[i], a, v) - pwald(cuts[i-1], a, v)
#p[i]
}
return(p)
}
waldPred(c(1, 2), wald_q)
wald_q
c(0, wald_q, inf)
c(0, wald_q, Inf)
cuts = c(0, wald_q, Inf)
pwald(cuts)
pwald(cuts, a, v)
pwald(1, a, v)
pwald(2, a, v)
pwald(0.5, a, v)
par = rnorm(2)
waldPred <- function(par, q){
#par = c(1, 2)
#Parameters
a = par[1]
v = par[2]
#Cuts for quantiles
cuts = c(0, q, Inf)
#cuts = c(0, wald_q, Inf)
p = c()
for (i in (2:length(cuts))){
#print (cuts[i])
#pwald(cuts[i], a, v)
p[i] = pwald(cuts[i], a, v) - pwald(cuts[i-1], a, v)
#p[i]
}
return(p)
}
waldPred(c(1, 2), wald_q)
waldPred(par, wald_q)
pwald(1, a[1], v[1])
par = rnorm(2)
comp = gsqfun_wald(par, q, f)
gsqfun_wald(rnorm(2), wald_q, f)
waldPred(par, wald_q)
gammaPred(par, wald_q)
source('~/Psych 891 Modelling cog dynamics/Codes/HW4Savalia.R')
gammaPred(par, wald_q)
gammaPred(c(1, 2, 1), wald_q)
waldPred(par, wald_q)
cuts = c(0, wald_q, Inf)
cuts
cuts[1]
pwald(cuts[0])
pwald(cuts[1])
pwald(cuts[2])
pwald(cuts[1], a, v)
pwald(cuts[2], a, v)
pwald(cuts[2], a, v) - pwald(cuts[1], a, v)
pwald(cuts[3], a, v) - pwald(cuts[2], a, v)
pwald(cuts[4], a, v) - pwald(cuts[3], a, v)
pwald(cuts[5], a, v) - pwald(cuts[4], a, v)
pwald(cuts[6], a, v) - pwald(cuts[5], a, v)
pwald(cuts[7], a, v) - pwald(cuts[6], a, v)
pwald(cuts[8], a, v) - pwald(cuts[7], a, v)
for (i in (1:length(cuts)-1)){
#print (cuts[i])
#pwald(cuts[i], a, v)
p[i] = pwald(cuts[i + 1], a, v) - pwald(cuts[i], a, v)
#p[i]
}
for (i in (1:length(cuts)-1)){
i
#pwald(cuts[i], a, v)
p[i] = pwald(cuts[i + 1], a, v) - pwald(cuts[i], a, v)
#p[i]
}
print (i)
for (i in (1:(length(cuts)-1))){
i
print (i)
#pwald(cuts[i], a, v)
p[i] = pwald(cuts[i + 1], a, v) - pwald(cuts[i], a, v)
#p[i]
}
waldPred(par, wald_q)
waldPred <- function(par, q){
#par = c(1, 2)
#Parameters
a = par[1]
v = par[2]
#Cuts for quantiles
cuts = c(0, q, Inf)
#cuts = c(0, wald_q, Inf)
p = c()
for (i in (1:(length(cuts)-1))){
i
print (i)
#pwald(cuts[i], a, v)
p[i] = pwald(cuts[i + 1], a, v) - pwald(cuts[i], a, v)
#p[i]
}
return(p)
}
waldPred(par, wald_q)
waldPred <- function(par, q){
#par = c(1, 2)
#Parameters
a = par[1]
v = par[2]
#Cuts for quantiles
cuts = c(0, q, Inf)
#cuts = c(0, wald_q, Inf)
p = c()
for (i in (1:(length(cuts)-1))){
p[i] = pwald(cuts[i + 1], a, v) - pwald(cuts[i], a, v)
}
return(p)
}
waldPred(par, wald_q)
gsqfun_wald(rnorm(2), wald_q, f)
gsqfun_wald <- function(par, q, freq){
p = waldPred(par, q)
p = p/sum(p)
print (p)
pf = p*sum(freq)
pf
gslev=1:length(freq)
gslev=gslev[freq>0]
gsq=2*sum(freq[gslev]*log(freq[gslev]/pf[gslev]))
return (gsq)
}
p = waldPred(par, q)
par = rnorm(2)
p = waldPred(par, q)
par
par = rtnorm(mu = 1, sig = 1, lo = 0, hi = Inf)
par
par = rtnorm(N = 2, mu = 1, sig = 1, lo = 0, hi = Inf)
par
p = waldPred(par, q)
waldPred <- function(par, q){
#par = c(1, 2)
#Parameters
a = par[1]
v = par[2]
#Cuts for quantiles
cuts = c(0, q, Inf)
#cuts = c(0, wald_q, Inf)
p = c()
for (i in (1:(length(cuts)-1))){
print (i)
p[i] = pwald(cuts[i + 1], a, v) - pwald(cuts[i], a, v)
}
return(p)
}
p = waldPred(par, q)
waldPred <- function(par, q){
#par = c(1, 2)
#Parameters
a = par[1]
v = par[2]
#Cuts for quantiles
cuts = c(0, q, Inf)
#cuts = c(0, wald_q, Inf)
p = c()
for (i in (1:(length(cuts)-1))){
print (pwald(cuts[i+1], a, v))
p[i] = pwald(cuts[i + 1], a, v) - pwald(cuts[i], a, v)
}
return(p)
}
par = rtnorm(N = 2, mu = 1, sig = 1, lo = 0, hi = Inf)
par
p = waldPred(par, q)
waldPred <- function(par, q){
#par = c(1, 2)
#Parameters
a = par[1]
v = par[2]
#Cuts for quantiles
cuts = c(0, q, Inf)
#cuts = c(0, wald_q, Inf)
p = c()
for (i in (1:(length(cuts)-1))){
print (cuts[i+1])
print (pwald(cuts[i+1], a, v))
p[i] = pwald(cuts[i + 1], a, v) - pwald(cuts[i], a, v)
}
return(p)
}
par = rtnorm(N = 2, mu = 1, sig = 1, lo = 0, hi = Inf)
par
p = waldPred(par, q)
cuts
waldPred <- function(par, q){
#par = c(1, 2)
#Parameters
a = par[1]
v = par[2]
#Cuts for quantiles
cuts = c(0, q, Inf)
#cuts = c(0, wald_q, Inf)
p = c()
print (cuts)
for (i in (1:(length(cuts)-1))){
#print (cuts[i+1])
#print (pwald(cuts[i+1], a, v))
p[i] = pwald(cuts[i + 1], a, v) - pwald(cuts[i], a, v)
}
return(p)
}
par = rtnorm(N = 2, mu = 1, sig = 1, lo = 0, hi = Inf)
par
p = waldPred(par, q)
