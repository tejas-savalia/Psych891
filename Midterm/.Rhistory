f_wald_v_participant_1 = c()
f_wald_gsq_participant_1 = c()
for (i in 1:n_participants){
q = quantile(e1dat[i,], c(0.1, 0.3, 0.5, 0.7, 0.9))
ls = wald_fit(q, f)
fpar = ls[[1]]
gval = ls[[2]]
f_wald_a_participant_1[i] = fpar[1]
f_wald_v_participant_1[i] = fpar[2]
f_wald_gsq_participant_1[i] = gval
}
f_wald_gsq_participant_1
true_mu = runif(nsim, 0.8, 1.2)
true_sig = runif(nsim, 0.1, 0.2)
true_tau = runif(nsim, 0.4, 0.8)
true_shape = runif(nsim, 5, 10)
true_scale = runif(nsim, 0.2, 0.35)
N=500 #condition 1
exgsim=function(mu,sig,tau,N){
norm=rnorm(N,mu,sig)
exp=rexp(N,1/tau)
exg=norm+exp
if(min(exg)<0) print("RTs < 0 ; Try different par values")
q=quantile(exg,c(.1,.3,.5,.7,.9))
freq_bin=c(.1,.2,.2,.2,.2,.1)*N
return(list(q, freq_bin))
}
gammaSim <- function(N, kappa, theta){
x <- rgamma(N, shape = kappa, scale = theta)
#hist(x, freq = FALSE, breaks = 30, col = "grey")
#Plotting lines
#xfit = seq(min(gam), max(gam), length = 2000)
#yfit = dgamma(xfit, shape = kappa, scale = theta)
#lines(xfit, yfit)
q=quantile(x,c(.1,.3,.5,.7,.9))
#abline(v=q)
freq_bin=c(.1,.2,.2,.2,.2,.1)*N
return (list(q, freq_bin))
}
exg = exgsim(true_mu[1],true_sig[1],true_tau[1],N)
gam = gammaSim(N, true_shape[1], true_scale[1])
q_exg = c()
f_exg = c()
q_gam = gam[1]
f_gam = gam[2]
fmu=c() #vectors of fit values from simulation (all pars from mu free model)
fsig=c()
ftau=c()
fmu2=c()
fgsq=c() # for the morel with mu free across conds
fgsq2=c() # for the model with all pars fixed across conds
f_exg_gsq = c()
f_gam_gsq = c()
fkap = c() #kappa
fth = c()  #theta
cnt=0
upfreq=20 #frequency of updates when it is running
pexg=function(q,mu,sig,tau){
pnorm( ((1/tau)*(q-mu)),0,((1/tau)*sig) ) -
exp(  -(1/tau)*(q-mu) + ((1/tau)*sig)^2/2 +
log(pnorm(((1/tau)*(q-mu)),((1/tau)*sig)^2,
((1/tau)*sig))) )
}
erfc <- function(q) 2*pnorm(q*sqrt(2),lower=FALSE)
dexg=function(q,mu,sig,tau) ((1/tau)/2) *
exp( ((1/tau)/2)*(2*mu+(1/tau)*sig^2-2*q) ) *
erfc( (mu+(1/tau)*sig^2-q)/(sqrt(2)*sig) )
pred=function(par,q){
mu=par[1]
sig=par[2]
tau=par[3]
p=c()
bcuts=c(0,q,Inf) #cutoffs for RT bins
for(bi in 1:(length(bcuts)-1)){
p[bi]=pexg(bcuts[bi+1],mu,sig,tau)-
pexg(bcuts[bi],mu,sig,tau)
}
return(p)
}
gsqfun=function(par,f,q){
p=pred(par,q) #get predicted proportions
#If a cell is 0 in the predictions but not in
# the data, fill in the prediction with a small
# number. This is a trick to keep the function
# from returning infinity.
p[p==0 & f>0] = .0001
p=p/sum(p) #renormalize so p adds up to 1 again
pf=c() #predicted frequencies in each RT bin
pf=p*sum(f)
#select RT bins that will be used to
# calculate G^2. Bins with 0 counts
# will be skipped to avoid values of -Inf.
# (This could only happen if you used fixed cutoffs
# for the RT bins instead of taking quantiles
# from the observed RTs)
gslev=1:length(f)
gslev=gslev[f>0]
gsq=2*sum(f[gslev]*log(f[gslev]/pf[gslev]))
}
exgauss_fit = function(q, f){
#starting parameter values for optimization
par=c(.5,.3,.5)
#optimization routine like above but
# for quantile-based likelihood
comp=gsqfun(par,f,q)
out=0 #just a variable to control when the loop stops
while(out==0){
fit=optim(par,fn=gsqfun,f=f,q=q)
par=fit$par
if((comp-fit$value)<=.001) out=1
comp=fit$value
}
par3=par
gsq=gsqfun(par3,f,q)
ls = list(par3, gsq)
return (ls)
}
gammaPred <- function(par, q){
#Parameters
kappa = par[1]
theta = par[2]
#Cuts for quantiles
cuts = c(0, q, Inf)
p = c()
for (i in (1:length(cuts)-1)){
p[i] = pgamma(cuts[i+1], kappa, scale = theta) - pgamma(cuts[i], kappa, scale = theta)
}
return(p)
}
gsqfun_gamma <- function(par, q, freq){
p = gammaPred(par, q)
p = p/sum(p)
#print (p)
pf = p*sum(freq)
pf
gslev=1:length(freq)
gslev=gslev[freq>0]
gsq=2*sum(freq[gslev]*log(freq[gslev]/pf[gslev]))
return (gsq)
}
gamma_fit = function(q, f){
par = c(2, 3)
comp = gsqfun_gamma(par, q, f)
while(TRUE){
fit=optim(par,gsqfun_gamma,freq=f,q=q)
par=fit$par
if((comp-fit$value)<=.001) break
comp=fit$value
}
gamma_par = par
gsq = gsqfun_gamma(par, q, f)
ls = list(gamma_par, gsq)
return (ls)
}
setwd('C:\\Users\\cemnlcmaplab\\Documents\\Psych 891 Modelling cog dynamics\\Codes\\Midterm')
load('Exp1.RData')
N = length(e1dat[1,]) #Number of trials
n_participants = length(e1dat[, 1]) #Number of participants
f = c(0.1, 0.2, 0.2, 0.2, 0.2, 0.1)*N
N
n_participants
f_exg_mu_participant_1 = c()
f_exg_sig_participant_1 = c()
f_exg_tau_participant_1 = c()
f_exg_gsq_participant_1 = c()
for (i in 1:n_participants){
q = quantile(e1dat[i,], c(0.1, 0.3, 0.5, 0.7, 0.9))
ls = exgauss_fit(q, f)
fpar = ls[[1]]
gval = ls[[2]]
f_exg_mu_participant_1[i] = fpar[1]
f_exg_sig_participant_1[i] = fpar[2]
f_exg_tau_participant_1[i] = fpar[3]
f_exg_gsq_participant_1[i] = gval
}
f_exg_gsq_participant_1
f_gam_kap_participant_1 = c()
f_gam_th_participant_1 = c()
f_gam_gsq_participant_1 = c()
for (i in 1:n_participants){
q = quantile(e1dat[i,], c(0.1, 0.3, 0.5, 0.7, 0.9))
ls = gamma_fit(q, f)
fpar = ls[[1]]
gval = ls[[2]]
f_gam_kap_participant_1[i] = fpar[1]
f_gam_th_participant_1[i] = fpar[2]
f_gam_gsq_participant_1[i] = gval
}
f_gam_gsq_participant_1
write.csv(f_gam_gsq_participant_1, file = "gsq.csv")
write.csv(f_exg_gsq_participant_1, file = "gsq.csv")
write.csv(f_wald_gsq_participant_1, file = "gsq.csv")
write.csv(f_gam_kap_participant_1, file = "kap1.csv")
f_exg_mu_participant_1
f_exg_sig_participant_1
f_exg_tau_participant_1
f_wald_a_participant_1
f_gam_gsq_participant_1
f_wald_gsq_participant_1
f_exg_gsq_participant_1
f_exg_mu_participant_1
f_wald_a_participant_1
load('Exp2.RData')
N = length(e2dat[,,1 ])/2 #Number of trials
n_participants = length(e2dat[1, 1, ])
f = c(0.1, 0.2, 0.2, 0.2, 0.2, 0.1)*N
f_wald_a_participant_21 = c()
f_wald_v_participant_21 = c()
f_wald_gsq_participant_21 = c()
i = 1
for (i in 1:n_participants){
q = quantile(e2dat[,,i][,2], c(0.1, 0.3, 0.5, 0.7, 0.9))
ls = wald_fit(q, f)
fpar = ls[[1]]
gval = ls[[2]]
f_wald_a_participant_21[i] = fpar[1]
f_wald_v_participant_21[i] = fpar[2]
f_wald_gsq_participant_21[i] = gval
}
f_wald_a_participant_21
f_wald_v_participant_21
load('Exp2.RData')
N = length(e2dat[,,1])/4 #Number of trials; divided by num conditions(2) and number of columns (2)
n_participants = length(e2dat[1, 1, ])
f1 = c(0.1, 0.2, 0.2, 0.2, 0.2, 0.1)*N
f2 = c(0.1, 0.2, 0.2, 0.2, 0.2, 0.1)*N
f_wald_a_participant_22 = c()
f_wald_v1_participant_22 = c()
f_wald_v2_participant_22 = c()
f_wald_gsq_participant_22 = c()
i = 1
for (i in 1:n_participants){
#Quantiles for condition 1
q1 = quantile(e2dat[,,i][e2dat[,,i][,1] == 1, 2], c(0.1, 0.3, 0.5, 0.7, 0.9))
#Quantiles for condition 2
q2 = quantile(e2dat[,,i][e2dat[,,i][,1] == 2, 2], c(0.1, 0.3, 0.5, 0.7, 0.9))
ls = wald_fit(q1, f1, q2, f2)
#ls = wald_fit(q, f)
fpar = ls[[1]]
gval = ls[[2]]
f_wald_a_participant_22[i] = fpar[1]
f_wald_v1_participant_22[i] = fpar[2]
f_wald_v2_participant_22[i] = fpar[3]
f_wald_gsq_participant_22[i] = gval
}
cons=function(cpar){
penf=0
pmn=.05
if(cpar[1]<pmn){
penf=penf+(pmn-cpar[1])
cpar[1]=pmn
}
pmn=.1
if(cpar[2]<pmn){
penf=penf+(pmn-cpar[2])
cpar[2]=pmn
}
#pmn=.01
#if(cpar[3]<pmn){
#  penf=penf+(pmn-cpar[3])
#  cpar[3]=pmn
#}
ls=list(cpar,penf)
return(ls)
}
waldPred <- function(par, q){
#Parameters
a = par[1]
v = par[2]
#Cuts for quantiles
cuts = c(0, q, Inf)
p = c()
for (i in (1:(length(cuts)-1))){
p[i] = pwald(cuts[i+1], a, v) - pwald(cuts[i], a, v)
}
return(p)
}
gsqfun_wald <- function(par, q1, freq1, q2, freq2){
ls = cons(par[1:2])
cpar = ls[[1]]
pen = ls[[2]]
p = waldPred(cpar, q1)
p = p/sum(p)
#print (p)
pf = p*sum(freq1)
pf
gslev=1:length(freq1)
gslev=gslev[freq1>0]
gsq1=2*sum(freq1[gslev]*log(freq1[gslev]/pf[gslev]))
gsq1 = gsq1 + pen*gsq1
ls = cons(c(par[1], par[3]))
cpar = ls[[1]]
pen = ls[[2]]
p = waldPred(cpar, q2)
p = p/sum(p)
#print (p)
pf = p*sum(freq2)
pf
gslev=1:length(freq2)
gslev=gslev[freq2>0]
gsq2=2*sum(freq2[gslev]*log(freq2[gslev]/pf[gslev]))
gsq2 = gsq2 + pen*gsq2
gsq = gsq1 + gsq2
return (gsq)
}
wald_fit = function(q1, f1, q2, f2){
par = c(0.15, 0.3, 0.3)
comp = gsqfun_wald(par, q1, f1, q2, f2)
#print (comp)
while(TRUE){
fit=optim(par,gsqfun_wald,freq1=f1,q1=q1, freq2=f2, q2 = q2)
# print (fit)
par=fit$par
if((comp-fit$value)<=.001) break
comp=fit$value
}
wald_par = par
gsq = gsqfun_wald(par, q1, f1, q2, f2)
ls = list(wald_par, gsq)
return (ls)
}
load('Exp2.RData')
N = length(e2dat[,,1])/4 #Number of trials; divided by num conditions(2) and number of columns (2)
n_participants = length(e2dat[1, 1, ])
f1 = c(0.1, 0.2, 0.2, 0.2, 0.2, 0.1)*N
f2 = c(0.1, 0.2, 0.2, 0.2, 0.2, 0.1)*N
f_wald_a_participant_22 = c()
f_wald_v1_participant_22 = c()
f_wald_v2_participant_22 = c()
f_wald_gsq_participant_22 = c()
i = 1
for (i in 1:n_participants){
#Quantiles for condition 1
q1 = quantile(e2dat[,,i][e2dat[,,i][,1] == 1, 2], c(0.1, 0.3, 0.5, 0.7, 0.9))
#Quantiles for condition 2
q2 = quantile(e2dat[,,i][e2dat[,,i][,1] == 2, 2], c(0.1, 0.3, 0.5, 0.7, 0.9))
ls = wald_fit(q1, f1, q2, f2)
#ls = wald_fit(q, f)
fpar = ls[[1]]
gval = ls[[2]]
f_wald_a_participant_22[i] = fpar[1]
f_wald_v1_participant_22[i] = fpar[2]
f_wald_v2_participant_22[i] = fpar[3]
f_wald_gsq_participant_22[i] = gval
}
f_wald_gsq_participant_22
f_wald_a_participant_22
cons=function(cpar){
penf=0
pmn=.05
if(cpar[1]<pmn){
penf=penf+(pmn-cpar[1])
cpar[1]=pmn
}
pmn=.1
if(cpar[2]<pmn){
penf=penf+(pmn-cpar[2])
cpar[2]=pmn
}
#pmn=.01
#if(cpar[3]<pmn){
#  penf=penf+(pmn-cpar[3])
#  cpar[3]=pmn
#}
ls=list(cpar,penf)
return(ls)
}
waldPred <- function(par, q){
#Parameters
a = par[1]
v = par[2]
#Cuts for quantiles
cuts = c(0, q, Inf)
p = c()
for (i in (1:(length(cuts)-1))){
p[i] = pwald(cuts[i+1], a, v) - pwald(cuts[i], a, v)
}
return(p)
}
gsqfun_wald <- function(par, q1, freq1, q2, freq2){
ls = cons(par[1:2])
cpar = ls[[1]]
pen = ls[[2]]
p = waldPred(cpar, q1)
p = p/sum(p)
#print (p)
pf = p*sum(freq1)
pf
gslev=1:length(freq1)
gslev=gslev[freq1>0]
gsq1=2*sum(freq1[gslev]*log(freq1[gslev]/pf[gslev]))
gsq1 = gsq1 + pen*gsq1
ls = cons(c(par[1], par[3]))
cpar = ls[[1]]
pen = ls[[2]]
p = waldPred(cpar, q2)
p = p/sum(p)
#print (p)
pf = p*sum(freq2)
pf
gslev=1:length(freq2)
gslev=gslev[freq2>0]
gsq2=2*sum(freq2[gslev]*log(freq2[gslev]/pf[gslev]))
gsq2 = gsq2 + pen*gsq2
gsq = gsq1 + gsq2
return (gsq)
}
wald_fit = function(q1, f1, q2, f2){
par = c(0.15, 0.3, 0.3)
comp = gsqfun_wald(par, q1, f1, q2, f2)
#print (comp)
while(TRUE){
fit=optim(par,gsqfun_wald,freq1=f1,q1=q1, freq2=f2, q2 = q2)
# print (fit)
par=fit$par
if((comp-fit$value)<=.001) break
comp=fit$value
}
wald_par = par
gsq = gsqfun_wald(par, q1, f1, q2, f2)
ls = list(wald_par, gsq)
return (ls)
}
gsqfun_wald <- function(par, q1, freq1, q2, freq2){
ls = cons(par[1:2])
cpar = ls[[1]]
pen = ls[[2]]
p = waldPred(cpar, q1)
p = p/sum(p)
#print (p)
pf = p*sum(freq1)
pf
gslev=1:length(freq1)
gslev=gslev[freq1>0]
gsq1=2*sum(freq1[gslev]*log(freq1[gslev]/pf[gslev]))
gsq1 = gsq1 + pen*gsq1
#ls = cons(c(par[1], par[3]))
#For fixed condition uncomment below. For v-free parameter, uncomment above
ls = cons(par[1:2])
cpar = ls[[1]]
pen = ls[[2]]
p = waldPred(cpar, q2)
p = p/sum(p)
#print (p)
pf = p*sum(freq2)
pf
gslev=1:length(freq2)
gslev=gslev[freq2>0]
gsq2=2*sum(freq2[gslev]*log(freq2[gslev]/pf[gslev]))
gsq2 = gsq2 + pen*gsq2
gsq = gsq1 + gsq2
return (gsq)
}
wald_fit = function(q1, f1, q2, f2){
par = c(0.15, 0.3, 0.3)
comp = gsqfun_wald(par, q1, f1, q2, f2)
#print (comp)
while(TRUE){
fit=optim(par,gsqfun_wald,freq1=f1,q1=q1, freq2=f2, q2 = q2)
# print (fit)
par=fit$par
if((comp-fit$value)<=.001) break
comp=fit$value
}
wald_par = par
gsq = gsqfun_wald(par, q1, f1, q2, f2)
ls = list(wald_par, gsq)
return (ls)
}
load('Exp2.RData')
N = length(e2dat[,,1 ])/4 #Number of trials
f1 = c(0.1, 0.2, 0.2, 0.2, 0.2, 0.1)*N
f2 = c(0.1, 0.2, 0.2, 0.2, 0.2, 0.1)*N
f_wald_a_participant_21 = c()
f_wald_v1_participant_21 = c()
f_wald_v2_participant_21 = c()
f_wald_gsq_participant_21 = c()
n_participants = length(e2dat[1, 1, ])
i = 1
for (i in 1:n_participants){
q1 = quantile(e2dat[,,i][e2dat[,,i][,1] == 1, 2], c(0.1, 0.3, 0.5, 0.7, 0.9))
#Quantiles for condition 2
q2 = quantile(e2dat[,,i][e2dat[,,i][,1] == 2, 2], c(0.1, 0.3, 0.5, 0.7, 0.9))
#q = quantile(e2dat[,,i][,2], c(0.1, 0.3, 0.5, 0.7, 0.9))
ls = wald_fit(q, f)
fpar = ls[[1]]
gval = ls[[2]]
f_wald_a_participant_21[i] = fpar[1]
f_wald_v_participant_21[i] = fpar[2]
f_wald_gsq_participant_21[i] = gval
}
for (i in 1:n_participants){
q1 = quantile(e2dat[,,i][e2dat[,,i][,1] == 1, 2], c(0.1, 0.3, 0.5, 0.7, 0.9))
#Quantiles for condition 2
q2 = quantile(e2dat[,,i][e2dat[,,i][,1] == 2, 2], c(0.1, 0.3, 0.5, 0.7, 0.9))
#q = quantile(e2dat[,,i][,2], c(0.1, 0.3, 0.5, 0.7, 0.9))
ls = wald_fit(q1, f1, q2, f2)
fpar = ls[[1]]
gval = ls[[2]]
f_wald_a_participant_21[i] = fpar[1]
f_wald_v_participant_21[i] = fpar[2]
f_wald_gsq_participant_21[i] = gval
}
f_wald_a_participant_21
f_wald_v1_participant_21
f_wald_v_participant_21
f_gsq_participant_1
f_wald_gsq_participant_21
f_wald_a_participant_21
write.csv(matrix(c(f_wald_a_participant_21, f_wald_v_participant_21, f_wald_gsq_participant_21)), file = "v-1.csv")
write.csv(matrix(c(f_wald_a_participant_21, f_wald_v_participant_21, f_wald_gsq_participant_21), nrow = 20, ncol = 3), file = "v-1.csv")
source('functions.R')
